'use strict';

var graphql = require('graphql').graphql;
var util = require('util');

function loadSchema(schemaName, ewd) {
  var gqlSchema = schemaName;
  var Schema;
  if (gqlSchema) {
    if (ewd.module[gqlSchema]) {
      Schema = ewd.module[gqlSchema].Schema;
    } else {
      Schema = ewd.util.requireAndWatch(gqlSchema).Schema;
    }
  } else {
    if (ewd.module[ewd.GraphQL.schema]) {
      Schema = ewd.module[ewd.GraphQL.schema].Schema;
    } else {
      Schema = ewd.util.requireAndWatch(ewd.GraphQL.schema).Schema;
    }
  }
  return Schema;
}

module.exports = {

  rest: function rest(ewd) {
    ewd.method = ewd.query.rest_method;
    try {
      ewd.post_data = JSON.parse(ewd.query.ewd_body);
    } catch (err) {
      return { errors: [{ message: 'Invalid query: ' + ewd.query.ewd_body }] };
    }
    return this.query(ewd);
  },

  query: function query(ewd) {
    if (ewd.method !== 'POST') return { errors: [{ message: 'GraphQL Requests must be POSTS' }] };
    if (!ewd.post_data.query) return { errors: [{ message: 'Missing query' }] };
    var variables;
    if (ewd.post_data.variables) {
      if (typeof ewd.post_data.variables === 'object') {
        variables = ewd.post_data.variables;
      }
      else {
        try {
          variables = JSON.parse(ewd.post_data.variables);
        }
        catch(err) {
          return { errors: [{ message: 'Invalid variables: ' +  ewd.post_data.variables}] };
        }
      }
    }
    var Schema = loadSchema(ewd.post_data.GraphQLSchema, ewd);
    console.log('variables = ' + JSON.stringify(variables));
    graphql(Schema, ewd.post_data.query, ewd, variables, ewd.post_data.operationName).then(function (result) {
      ewd.sendWebServiceResponse(result, 'text/json');
    });
    return { finished: false };
  },

  onMessage: {
    GraphQL: function GraphQL(params, ewd) {
      if (params.query === '') return { errors: [{ message: 'Empty query' }] };
      var Schema = loadSchema(params.GraphQLSchema, ewd);
      console.log('about to invoke graphql: ewd = ' + util.inspect(ewd));
      graphql(Schema, params.query, ewd, params.variables, params.operationName).then(function (result) {
        ewd.sendWebSocketMsg({
          type: 'GraphQL',
          message: result,
          finished: true
        });
      });
      return { finished: false };
    }
  }
};

/*

Usage Notes:

ewd.GraphQL.schema = 'GraphQLSchema' by default

To use as web service:

POST http://192.168.1.188:8080/json/GraphQLServer/guery

Content-type: application/json
Data payload for a query:

{query: '{patient(id: "2") {id, name, town, country}}', variables: {}}

To use with WebSocket request:

  set message type to 'GraphQL'
  and ensure that the following is added to the app's back-end module, inside its module.exports object:

 services: function() {
   return ['GraphQLServer'];
 }

==============


Introspect Schema:

{__schema{queryType{name,fields{name,description}}}}

Introspect a Type

{"query": "{__type(name: \"Patient\"){name,fields{name,type{name}}}}", "variables": {}}

To pre-compile an ES6-formatted GraphQL schema, make sure you've loaded babel: npm install --global babel
Then in node_modules:

babel GraphQLSchema-es6.js --out-file GraphQLSchema.js

======================

Using via ewdrest:

URL endpoint: http://192.168.1.188:8081/gqlEWD/graphql

Start file:

   var ewdrest = require('ewdrest');

   var params = {
     // REST server listener port
     restPort: 8081,
     // service module mapping
     service: {
       graphql: {
         module: 'GraphQLServer',
         service: 'rest',
         contentType: 'application/json'
       }
     },
     // EWD.js server mapping
     server: {
       gqlEWD: {
         host: '127.0.0.1',
         port: 8080,
         ssl: false,
         secretKey: 'graphql',
         accessId: 'GraphQLServer'
       }
     }
   };

   ewdrest.start(params);

All requests must be POSTs

===============================




*/
